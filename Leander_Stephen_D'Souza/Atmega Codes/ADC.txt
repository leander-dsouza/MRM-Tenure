#include <avr/io.h>
#define F_CPU 1000000UL
#include <util/delay.h>


void adc_init()
{
	
	ADMUX = (1<<REFS0);
	
	// ADC Enable and prescaler of 16
	// 1000000/50000=20
	ADCSRA |= (1<<ADEN)|(1<<ADPS2);
}

// read adc value
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
	
	return (ADC);
}

int main()
{
	uint16_t adc_result0;
	
	DDRB|= 0b0001000;           // to connect led to PB0
	TCCR0 |=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
	
	
	// initialize adc 
	adc_init();
	
	
	
	_delay_ms(50);
	
	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
		
		
		OCR0=adc_result0;
		
	}
	
}